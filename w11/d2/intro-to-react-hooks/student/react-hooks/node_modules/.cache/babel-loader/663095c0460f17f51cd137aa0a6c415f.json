{"ast":null,"code":"/*\r\nThis module implements the observer design pattern and allows\r\nother modules to register/unregister a callback function that\r\nwill be invoked when the battery's charge level or charging status\r\nchanges.\r\n\r\nThis module currently only works with Chrome, Opera & Samsung browsers.\r\nYou can read the Battery Status API specification here:\r\nhttps://w3c.github.io/battery/\r\n\r\nAdditional events/properties available but not used in this module:\r\n- chargingtimechange/chargingTime\r\n- ondischargingtimechange/dischargingTime\r\n*/\nlet battery;\nconst observerCallbacks = [];\n\nasync function initBattery() {\n  battery = await navigator.getBattery();\n  battery.addEventListener(\"levelchange\", notifyObservers);\n  battery.addEventListener(\"chargingchange\", notifyObservers);\n  notifyObservers();\n}\n\ninitBattery();\n\nfunction getBatteryData() {\n  return {\n    level: battery.level,\n    charging: battery.charging\n  };\n}\n\nfunction notifyObservers() {\n  observerCallbacks.forEach(cb => cb(getBatteryData()));\n}\n\nexport function register(callback) {\n  if (observerCallbacks.includes(callback)) return;\n  observerCallbacks.push(callback);\n\n  if (battery) {\n    callback(getBatteryData());\n  }\n}\nexport function unregister(callback) {\n  let idx = observerCallbacks.indexOf(callback);\n  if (idx !== -1) observerCallbacks.splice(idx, 1);\n}","map":{"version":3,"sources":["C:/Users/wang_/projects/SEI-35-7/w11/d2/intro-to-react-hooks/student/react-hooks/src/utils/battery.js"],"names":["battery","observerCallbacks","initBattery","navigator","getBattery","addEventListener","notifyObservers","getBatteryData","level","charging","forEach","cb","register","callback","includes","push","unregister","idx","indexOf","splice"],"mappings":"AAAA;;;;;;;;;;;;;;AAeA,IAAIA,OAAJ;AACA,MAAMC,iBAAiB,GAAG,EAA1B;;AAEA,eAAeC,WAAf,GAA6B;AAC3BF,EAAAA,OAAO,GAAG,MAAMG,SAAS,CAACC,UAAV,EAAhB;AACAJ,EAAAA,OAAO,CAACK,gBAAR,CAAyB,aAAzB,EAAwCC,eAAxC;AACAN,EAAAA,OAAO,CAACK,gBAAR,CAAyB,gBAAzB,EAA2CC,eAA3C;AACAA,EAAAA,eAAe;AAChB;;AAEDJ,WAAW;;AAEX,SAASK,cAAT,GAA0B;AACxB,SAAO;AACLC,IAAAA,KAAK,EAAER,OAAO,CAACQ,KADV;AAELC,IAAAA,QAAQ,EAAET,OAAO,CAACS;AAFb,GAAP;AAID;;AAED,SAASH,eAAT,GAA2B;AACzBL,EAAAA,iBAAiB,CAACS,OAAlB,CAA0BC,EAAE,IAAIA,EAAE,CAACJ,cAAc,EAAf,CAAlC;AACD;;AAED,OAAO,SAASK,QAAT,CAAkBC,QAAlB,EAA4B;AACjC,MAAIZ,iBAAiB,CAACa,QAAlB,CAA2BD,QAA3B,CAAJ,EAA0C;AAC1CZ,EAAAA,iBAAiB,CAACc,IAAlB,CAAuBF,QAAvB;;AACA,MAAIb,OAAJ,EAAa;AACXa,IAAAA,QAAQ,CAACN,cAAc,EAAf,CAAR;AACD;AACF;AAED,OAAO,SAASS,UAAT,CAAoBH,QAApB,EAA8B;AACnC,MAAII,GAAG,GAAGhB,iBAAiB,CAACiB,OAAlB,CAA0BL,QAA1B,CAAV;AACA,MAAII,GAAG,KAAK,CAAC,CAAb,EAAgBhB,iBAAiB,CAACkB,MAAlB,CAAyBF,GAAzB,EAA8B,CAA9B;AACjB","sourcesContent":["/*\r\nThis module implements the observer design pattern and allows\r\nother modules to register/unregister a callback function that\r\nwill be invoked when the battery's charge level or charging status\r\nchanges.\r\n\r\nThis module currently only works with Chrome, Opera & Samsung browsers.\r\nYou can read the Battery Status API specification here:\r\nhttps://w3c.github.io/battery/\r\n\r\nAdditional events/properties available but not used in this module:\r\n- chargingtimechange/chargingTime\r\n- ondischargingtimechange/dischargingTime\r\n*/\r\n\r\nlet battery;\r\nconst observerCallbacks = [];\r\n\r\nasync function initBattery() {\r\n  battery = await navigator.getBattery();\r\n  battery.addEventListener(\"levelchange\", notifyObservers);\r\n  battery.addEventListener(\"chargingchange\", notifyObservers);\r\n  notifyObservers();\r\n}\r\n\r\ninitBattery();\r\n\r\nfunction getBatteryData() {\r\n  return {\r\n    level: battery.level,\r\n    charging: battery.charging\r\n  };\r\n}\r\n\r\nfunction notifyObservers() {\r\n  observerCallbacks.forEach(cb => cb(getBatteryData()));\r\n}\r\n\r\nexport function register(callback) {\r\n  if (observerCallbacks.includes(callback)) return;\r\n  observerCallbacks.push(callback);\r\n  if (battery) {\r\n    callback(getBatteryData());\r\n  }\r\n}\r\n\r\nexport function unregister(callback) {\r\n  let idx = observerCallbacks.indexOf(callback);\r\n  if (idx !== -1) observerCallbacks.splice(idx, 1);\r\n}"]},"metadata":{},"sourceType":"module"}